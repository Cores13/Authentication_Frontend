/* tslint:disable */
/* eslint-disable */
/**
 * Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from '../configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ApiUsersResendVerificationEmailPostRequest, ApiUsersVerifyEmailPostRequest, ForgotPasswordRequestDto, ForgotPasswordResetDto, ForgotPasswordVerifyCodeDto, LoginRequestDto, RefreshTokenRequestDto, ResendVerificationEmailDto, TokenResponseDto, UpdateMePasswordRequestDto, UserResponseDto, UserRoleEnum, UsersApiApiUsersForgotPasswordRequestPostRequest, UsersApiApiUsersForgotPasswordResetPasswordPostRequest, UsersApiApiUsersForgotPasswordVerifyCodePostRequest, UsersApiApiUsersIdGetRequest, UsersApiApiUsersMeChangePasswordPutRequest, UsersApiApiUsersMePutRequest, VerifyEmailDto } from '../api';

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ForgotPasswordRequestDto} [forgotPasswordRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersForgotPasswordRequestPost: async (forgotPasswordRequestDto?: ForgotPasswordRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/forgotpasswordrequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ForgotPasswordResetDto} [forgotPasswordResetDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersForgotPasswordResetPasswordPost: async (forgotPasswordResetDto?: ForgotPasswordResetDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/forgotpasswordreset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordResetDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ForgotPasswordVerifyCodeDto} [forgotPasswordVerifyCodeDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersForgotPasswordVerifyCodePost: async (forgotPasswordVerifyCodeDto?: ForgotPasswordVerifyCodeDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/forgotpasswordverifycode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordVerifyCodeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VerifyEmailDto} [verifyEmailDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersVerifyEmailPost: async (verifyEmailDto?: VerifyEmailDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            const localVarPath = `/api/user/verifyemail/${verifyEmailDto?.id}/${verifyEmailDto?.code}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResendVerificationEmailDto} [resendVerificationEmailDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersResendVerificationEmailPost: async (resendVerificationEmailDto?: ResendVerificationEmailDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            const localVarPath = `/api/user/resendverificationemail/${resendVerificationEmailDto?.id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUsersIdGet', 'id', id)
            const localVarPath = `/api/user/getone/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateMePasswordRequestDto} [updateMePasswordRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersMeChangePasswordPut: async (updateMePasswordRequestDto?: UpdateMePasswordRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMePasswordRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersMeGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [phoneNumber] 
         * @param {string} [specialisation] 
         * @param {string} [title] 
         * @param {string} [password] 
         * @param {boolean} [approved] 
         * @param {string} [email] 
         * @param {string} [dateOfBirth] 
         * @param {any} [profileImage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersMePut: async (id?: number, name?: string, password?: string, email?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/updateme`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (id !== undefined) { 
                localVarFormParams.append('Id', id as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('Name', name as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.append('Password', password as any);
            }
            if (email !== undefined) { 
                localVarFormParams.append('Email', email as any);
            }
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordRequestDto} [forgotPasswordRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersForgotPasswordRequestPost(forgotPasswordRequestDto?: ForgotPasswordRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersForgotPasswordRequestPost(forgotPasswordRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ForgotPasswordResetDto} [forgotPasswordResetDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersForgotPasswordResetPasswordPost(forgotPasswordResetDto?: ForgotPasswordResetDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersForgotPasswordResetPasswordPost(forgotPasswordResetDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ForgotPasswordVerifyCodeDto} [forgotPasswordVerifyCodeDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersForgotPasswordVerifyCodePost(forgotPasswordVerifyCodeDto?: ForgotPasswordVerifyCodeDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersForgotPasswordVerifyCodePost(forgotPasswordVerifyCodeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {VerifyEmailDto} [verifyEmailDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersVerifyEmailPost(verifyEmailDto?: VerifyEmailDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersVerifyEmailPost(verifyEmailDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResendVerificationEmailDto} [resendVerificationEmailDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersResendVerificationEmailPost(resendVerificationEmailDto?: ResendVerificationEmailDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersResendVerificationEmailPost(resendVerificationEmailDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateMePasswordRequestDto} [updateMePasswordRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersMeChangePasswordPut(updateMePasswordRequestDto?: UpdateMePasswordRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersMeChangePasswordPut(updateMePasswordRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersMeGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersMeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [phoneNumber] 
         * @param {string} [specialisation] 
         * @param {string} [title] 
         * @param {string} [password] 
         * @param {boolean} [approved] 
         * @param {string} [email] 
         * @param {string} [dateOfBirth] 
         * @param {any} [profileImage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersMePut(id?: number, name?: string, password?: string, email?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersMePut(id, name, password, email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordRequestDto} [forgotPasswordRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersForgotPasswordRequestPost(forgotPasswordRequestDto?: ForgotPasswordRequestDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiUsersForgotPasswordRequestPost(forgotPasswordRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ForgotPasswordResetDto} [forgotPasswordResetDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersForgotPasswordResetPasswordPost(forgotPasswordResetDto?: ForgotPasswordResetDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiUsersForgotPasswordResetPasswordPost(forgotPasswordResetDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ForgotPasswordVerifyCodeDto} [forgotPasswordVerifyCodeDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersForgotPasswordVerifyCodePost(forgotPasswordVerifyCodeDto?: ForgotPasswordVerifyCodeDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiUsersForgotPasswordVerifyCodePost(forgotPasswordVerifyCodeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdGet(id: number, options?: any): AxiosPromise<UserResponseDto> {
            return localVarFp.apiUsersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateMePasswordRequestDto} [updateMePasswordRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersMeChangePasswordPut(updateMePasswordRequestDto?: UpdateMePasswordRequestDto, options?: any): AxiosPromise<UserResponseDto> {
            return localVarFp.apiUsersMeChangePasswordPut(updateMePasswordRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersMeGet(options?: any): AxiosPromise<UserResponseDto> {
            return localVarFp.apiUsersMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [phoneNumber] 
         * @param {string} [specialisation] 
         * @param {string} [title] 
         * @param {string} [password] 
         * @param {boolean} [approved] 
         * @param {string} [email] 
         * @param {string} [dateOfBirth] 
         * @param {any} [profileImage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersMePut(id?: number, name?: string, password?: string, email?: string, options?: any): AxiosPromise<UserResponseDto> {
            return localVarFp.apiUsersMePut(id, name, password, email, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {UsersApiApiUsersForgotPasswordRequestPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersForgotPasswordRequestPost(requestParameters: UsersApiApiUsersForgotPasswordRequestPostRequest = {}, options?: any) {
        return UsersApiFp(this.configuration).apiUsersForgotPasswordRequestPost(requestParameters.forgotPasswordRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiApiUsersForgotPasswordResetPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersForgotPasswordResetPasswordPost(requestParameters: UsersApiApiUsersForgotPasswordResetPasswordPostRequest = {}, options?: any) {
        return UsersApiFp(this.configuration).apiUsersForgotPasswordResetPasswordPost(requestParameters.forgotPasswordResetDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiApiUsersForgotPasswordVerifyCodePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersForgotPasswordVerifyCodePost(requestParameters: UsersApiApiUsersForgotPasswordVerifyCodePostRequest = {}, options?: any) {
        return UsersApiFp(this.configuration).apiUsersForgotPasswordVerifyCodePost(requestParameters.forgotPasswordVerifyCodeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiUsersVerifyEmailPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersVerifyEmailPost(requestParameters: ApiUsersVerifyEmailPostRequest = {}, options?: any) {
        return UsersApiFp(this.configuration).apiUsersVerifyEmailPost(requestParameters.verifyEmailDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiUsersResendVerificationEmailPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersResendVerificationEmailPost(requestParameters: ApiUsersResendVerificationEmailPostRequest = {}, options?: any) {
        return UsersApiFp(this.configuration).apiUsersResendVerificationEmailPost(requestParameters.resendVerificationEmailDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiApiUsersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersIdGet(requestParameters: UsersApiApiUsersIdGetRequest, options?: any) {
        return UsersApiFp(this.configuration).apiUsersIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiApiUsersMeChangePasswordPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersMeChangePasswordPut(requestParameters: UsersApiApiUsersMeChangePasswordPutRequest = {}, options?: any) {
        return UsersApiFp(this.configuration).apiUsersMeChangePasswordPut(requestParameters.ChangePasswordRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersMeGet(options?: any) {
        return UsersApiFp(this.configuration).apiUsersMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiApiUsersMePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersMePut(requestParameters: UsersApiApiUsersMePutRequest = {}, options?: any) {
        return UsersApiFp(this.configuration).apiUsersMePut(requestParameters.id, requestParameters.name, requestParameters.password, requestParameters.email, options).then((request) => request(this.axios, this.basePath));
    }
}