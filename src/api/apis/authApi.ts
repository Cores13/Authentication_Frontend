/* tslint:disable */
/* eslint-disable */
/**
 * Takeda API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from '../configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { LoginRequestDto, RefreshTokenRequestDto, TokenResponseDto, UserRoleEnum } from '../api';

/**
 * TokensApi - axios parameter creator
 * @export
 */
export const TokensApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginRequestDto} [loginRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost: async (loginRequestDto?: LoginRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutPost: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RefreshTokenRequestDto} [refreshTokenRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshTokenPost: async (refreshTokenRequestDto?: RefreshTokenRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [email] 
         * @param {string} [name] 
         * @param {string} [phoneNumber] 
         * @param {string} [specialisation] 
         * @param {string} [title] 
         * @param {string} [password] 
         * @param {string} [fcmToken] 
         * @param {UserRoleEnum} [role] 
         * @param {any} [profileImage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPost: async (email?: string, name?: string, phoneNumber?: string, specialisation?: string, title?: string, password?: string, fcmToken?: string, role?: UserRoleEnum, profileImage?: any, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (email !== undefined) { 
                localVarFormParams.append('Email', email as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('Name', name as any);
            }
    
            if (phoneNumber !== undefined) { 
                localVarFormParams.append('PhoneNumber', phoneNumber as any);
            }
    
            if (specialisation !== undefined) { 
                localVarFormParams.append('Specialisation', specialisation as any);
            }
    
            if (title !== undefined) { 
                localVarFormParams.append('Title', title as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.append('Password', password as any);
            }
    
            if (fcmToken !== undefined) { 
                localVarFormParams.append('FcmToken', fcmToken as any);
            }
    
            if (role !== undefined) { 
                localVarFormParams.append('Role', new Blob([JSON.stringify(role)], { type: "application/json", }));
            }
    
            if (profileImage !== undefined) { 
                localVarFormParams.append('ProfileImage', profileImage as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TokensApi - functional programming interface
 * @export
 */
export const TokensApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TokensApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginRequestDto} [loginRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginPost(loginRequestDto?: LoginRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginPost(loginRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutPost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RefreshTokenRequestDto} [refreshTokenRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshTokenPost(refreshTokenRequestDto?: RefreshTokenRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshTokenPost(refreshTokenRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [email] 
         * @param {string} [name] 
         * @param {string} [phoneNumber] 
         * @param {string} [specialisation] 
         * @param {string} [title] 
         * @param {string} [password] 
         * @param {string} [fcmToken] 
         * @param {UserRoleEnum} [role] 
         * @param {any} [profileImage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerPost(email?: string, name?: string, phoneNumber?: string, specialisation?: string, title?: string, password?: string, fcmToken?: string, role?: UserRoleEnum, profileImage?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerPost(email, name, phoneNumber, specialisation, title, password, fcmToken, role, profileImage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TokensApi - factory interface
 * @export
 */
export const TokensApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TokensApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginRequestDto} [loginRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost(loginRequestDto?: LoginRequestDto, options?: any): AxiosPromise<TokenResponseDto> {
            return localVarFp.loginPost(loginRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutPost(options?: any): AxiosPromise<void> {
            return localVarFp.logoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RefreshTokenRequestDto} [refreshTokenRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshTokenPost(refreshTokenRequestDto?: RefreshTokenRequestDto, options?: any): AxiosPromise<TokenResponseDto> {
            return localVarFp.refreshTokenPost(refreshTokenRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [email] 
         * @param {string} [name] 
         * @param {string} [phoneNumber] 
         * @param {string} [specialisation] 
         * @param {string} [title] 
         * @param {string} [password] 
         * @param {string} [fcmToken] 
         * @param {UserRoleEnum} [role] 
         * @param {any} [profileImage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPost(email?: string, name?: string, phoneNumber?: string, specialisation?: string, title?: string, password?: string, fcmToken?: string, role?: UserRoleEnum, profileImage?: any, options?: any): AxiosPromise<TokenResponseDto> {
            return localVarFp.registerPost(email, name, phoneNumber, specialisation, title, password, fcmToken, role, profileImage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for loginPost operation in TokensApi.
 * @export
 * @interface TokensApiLoginPostRequest
 */
export interface TokensApiLoginPostRequest {
    /**
     * 
     * @type {LoginRequestDto}
     * @memberof TokensApiLoginPost
     */
    readonly loginRequestDto?: LoginRequestDto
}

/**
 * Request parameters for refreshTokenPost operation in TokensApi.
 * @export
 * @interface TokensApiRefreshTokenPostRequest
 */
export interface TokensApiRefreshTokenPostRequest {
    /**
     * 
     * @type {RefreshTokenRequestDto}
     * @memberof TokensApiRefreshTokenPost
     */
    readonly refreshTokenRequestDto?: RefreshTokenRequestDto
}

/**
 * Request parameters for registerPost operation in TokensApi.
 * @export
 * @interface TokensApiRegisterPostRequest
 */
export interface TokensApiRegisterPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TokensApiRegisterPost
     */
    readonly email?: string

    /**
     * 
     * @type {string}
     * @memberof TokensApiRegisterPost
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof TokensApiRegisterPost
     */
    readonly phoneNumber?: string

    /**
     * 
     * @type {string}
     * @memberof TokensApiRegisterPost
     */
    readonly specialisation?: string

    /**
     * 
     * @type {string}
     * @memberof TokensApiRegisterPost
     */
    readonly title?: string

    /**
     * 
     * @type {string}
     * @memberof TokensApiRegisterPost
     */
    readonly password?: string

    /**
     * 
     * @type {string}
     * @memberof TokensApiRegisterPost
     */
    readonly fcmToken?: string

    /**
     * 
     * @type {UserRoleEnum}
     * @memberof TokensApiRegisterPost
     */
    readonly role?: UserRoleEnum

    /**
     * 
     * @type {any}
     * @memberof TokensApiRegisterPost
     */
    readonly profileImage?: any
}

/**
 * TokensApi - object-oriented interface
 * @export
 * @class TokensApi
 * @extends {BaseAPI}
 */
export class TokensApi extends BaseAPI {
    /**
     * 
     * @param {TokensApiLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    public loginPost(requestParameters: TokensApiLoginPostRequest = {}, options?: any) {
        return TokensApiFp(this.configuration).loginPost(requestParameters.loginRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    public logoutPost(options?: any) {
        return TokensApiFp(this.configuration).logoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TokensApiRefreshTokenPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    public refreshTokenPost(requestParameters: TokensApiRefreshTokenPostRequest = {}, options?: any) {
        return TokensApiFp(this.configuration).refreshTokenPost(requestParameters.refreshTokenRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TokensApiRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    public registerPost(requestParameters: TokensApiRegisterPostRequest = {}, options?: any) {
        return TokensApiFp(this.configuration).registerPost(requestParameters.email, requestParameters.name, requestParameters.phoneNumber, requestParameters.specialisation, requestParameters.title, requestParameters.password, requestParameters.fcmToken, requestParameters.role, requestParameters.profileImage, options).then((request) => request(this.axios, this.basePath));
    }
}